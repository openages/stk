export declare const KnownAudio: Record<string, number[]>;
export default function getOfflineAudioContext(): Promise<{
    totalUniqueSamples: number;
    compressorGainReduction: number;
    floatFrequencyDataSum: number;
    floatTimeDomainDataSum: number;
    sampleSum: number;
    binsSample: any[];
    copySample: any[];
    values: {
        "AnalyserNode.channelCount": any;
        "AnalyserNode.channelCountMode": any;
        "AnalyserNode.channelInterpretation": any;
        "AnalyserNode.context.sampleRate": any;
        "AnalyserNode.fftSize": any;
        "AnalyserNode.frequencyBinCount": any;
        "AnalyserNode.maxDecibels": any;
        "AnalyserNode.minDecibels": any;
        "AnalyserNode.numberOfInputs": any;
        "AnalyserNode.numberOfOutputs": any;
        "AnalyserNode.smoothingTimeConstant": any;
        "AnalyserNode.context.listener.forwardX.maxValue": any;
        "BiquadFilterNode.gain.maxValue": any;
        "BiquadFilterNode.frequency.defaultValue": any;
        "BiquadFilterNode.frequency.maxValue": any;
        "DynamicsCompressorNode.attack.defaultValue": any;
        "DynamicsCompressorNode.knee.defaultValue": any;
        "DynamicsCompressorNode.knee.maxValue": any;
        "DynamicsCompressorNode.ratio.defaultValue": any;
        "DynamicsCompressorNode.ratio.maxValue": any;
        "DynamicsCompressorNode.release.defaultValue": any;
        "DynamicsCompressorNode.release.maxValue": any;
        "DynamicsCompressorNode.threshold.defaultValue": any;
        "DynamicsCompressorNode.threshold.minValue": any;
        "OscillatorNode.detune.maxValue": any;
        "OscillatorNode.detune.minValue": any;
        "OscillatorNode.frequency.defaultValue": any;
        "OscillatorNode.frequency.maxValue": any;
        "OscillatorNode.frequency.minValue": any;
    };
    noise: number;
    lied: number | boolean;
}>;
export declare function audioHTML(fp: any): string;
